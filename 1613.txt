#include<iostream>
#include<queue>
using namespace std;
const int INF = 100000000;
const int MAX_N = 100+1;
const int MAX_M = 100+1;
char maze[MAX_M][MAX_N];//????????????????????
int N,M;
int sx ,sy ;//????????
int gx,gy;//????????
int d[MAX_M][MAX_N];//??????????????????????????
int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};//????????????????????
typedef pair<int, int> P;
int bfs(){
	queue<P> que;
	for(int i = 0;i < M; i++)
	for(int j = 0; j< N; j++)
	d[i][j] = INF;
	//??????????????????????????????????????0
 
	que.push(P(sx, sy));
	d[sx][sy] = 0;
	//????????????????????????0
	while(que.size()){
		//??????????????????????
	P p = que.front();
	que.pop();
	//????????????????????????????????????
	if(p.first == gx && p.second == gy)break;
	
	//??????????????
	for(int i = 0; i < 4; i++){
		//????????????????????nx, ny??
		int nx = p.first + dx[i] , ny = p.second + dy[i];

		//??????????????????????????????
		if(0 <= nx && nx < M && 0 <= ny && ny < N && maze[nx][ny] != '#' && d[nx][ny] == INF){
			//??????????????????????????????????????????p??????+1 
			que.push(P(nx, ny));
			d[nx][ny] = d[p.first][p.second] + 1;
		} 
	} 
	}
	return d[gx][gy];
	
}
void solve(){
	int res = bfs();
	cout<<res<<endl;
}
int main()
{
	cin>>M>>N;
	for(int i = 0; i < M; i++)
	for(int j = 0; j < N; j++){
		cin>>maze[i][j];
		if(maze[i][j] == 'S'){
			sx = i;
			sy = j;
		}
		if(maze[i][j] == 'G'){
			gx = i;
			gy = j;
		}
	}

	solve();
	return 0;
	 
}
